"use strict";(self.webpackChunkgfdoc=self.webpackChunkgfdoc||[]).push([[88638],{948093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(474848),i=n(28453);const a={title:"\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",sidebar_position:1},s=void 0,o={id:"\u6838\u5fc3\u7ec4\u4ef6/\u7f13\u5b58\u7ba1\u7406/\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",title:"\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",description:"v1.14.0 \u65b0\u7248\u672c\u7279\u6027\u3002",source:"@site/versioned_docs/version-1.14.x/1-\u6838\u5fc3\u7ec4\u4ef6/8-\u7f13\u5b58\u7ba1\u7406/1-\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d.md",sourceDirName:"1-\u6838\u5fc3\u7ec4\u4ef6/8-\u7f13\u5b58\u7ba1\u7406",slug:"/\u6838\u5fc3\u7ec4\u4ef6/\u7f13\u5b58\u7ba1\u7406/\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",permalink:"/gf-site/docs/1.14.x/\u6838\u5fc3\u7ec4\u4ef6/\u7f13\u5b58\u7ba1\u7406/\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",draft:!1,unlisted:!1,editUrl:"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-1.14.x/1-\u6838\u5fc3\u7ec4\u4ef6/8-\u7f13\u5b58\u7ba1\u7406/1-\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d.md",tags:[],version:"1.14.x",lastUpdatedBy:"John",lastUpdatedAt:1730026931e3,sidebarPosition:1,frontMatter:{title:"\u7f13\u5b58\u7ba1\u7406-\u7f13\u5b58\u9002\u914d",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u7f13\u5b58\u7ba1\u7406-\u5185\u5b58\u7f13\u5b58",permalink:"/gf-site/docs/1.14.x/\u6838\u5fc3\u7ec4\u4ef6/\u7f13\u5b58\u7ba1\u7406/\u7f13\u5b58\u7ba1\u7406-\u5185\u5b58\u7f13\u5b58"},next:{title:"\u7f13\u5b58\u7ba1\u7406-Redis\u7f13\u5b58",permalink:"/gf-site/docs/1.14.x/\u6838\u5fc3\u7ec4\u4ef6/\u7f13\u5b58\u7ba1\u7406/\u7f13\u5b58\u7ba1\u7406-Redis\u7f13\u5b58"}},c={},u=[];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"v1.14.0"})," \u65b0\u7248\u672c\u7279\u6027\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"gcache"})," \u6a21\u5757\u91c7\u7528\u4e86\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u63d0\u4f9b\u4e86 ",(0,r.jsx)(t.code,{children:"Adapter"})," \u9002\u914d\u5668\u63a5\u53e3\uff0c\u4efb\u4f55\u5b9e\u73b0\u4e86 ",(0,r.jsx)(t.code,{children:"Adapter"})," \u63a5\u53e3\u7684\u5bf9\u8c61\u5747\u53ef\u6ce8\u518c\u5230\u7f13\u5b58\u7ba1\u7406\u5bf9\u8c61\u4e2d\uff0c\u4f7f\u5f97\u5f00\u53d1\u8005\u53ef\u4ee5\u5bf9\u7f13\u5b58\u7ba1\u7406\u5bf9\u8c61\u8fdb\u884c\u7075\u6d3b\u7684\u6269\u5c55\u3002"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"gcache.Cache"})," \u5bf9\u8c61\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"// Cache struct.\ntype Cache struct {\n\tAdapter // Adapter for cache features.\n}\n\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Adapter"})," \u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://godoc.org/github.com/gogf/gf/os/gcache#Adapter",children:"https://godoc.org/github.com/gogf/gf/os/gcache#Adapter"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"// Adapter is the adapter for cache features implements.\ntype Adapter interface {\n\t// Set sets cache with <key>-<value> pair, which is expired after <duration>.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It deletes the <key> if <duration> < 0.\n\tSet(key interface{}, value interface{}, duration time.Duration) error\n\n\t// Sets batch sets cache with key-value pairs by <data>, which is expired after <duration>.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It deletes the keys of <data> if <duration> < 0 or given <value> is nil.\n\tSets(data map[interface{}]interface{}, duration time.Duration) error\n\n\t// SetIfNotExist sets cache with <key>-<value> pair which is expired after <duration>\n\t// if <key> does not exist in the cache. It returns true the <key> dose not exist in the\n\t// cache and it sets <value> successfully to the cache, or else it returns false.\n\t//\n\t// The parameter <value> can be type of <func() interface{}>, but it dose nothing if its\n\t// result is nil.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It deletes the <key> if <duration> < 0 or given <value> is nil.\n\tSetIfNotExist(key interface{}, value interface{}, duration time.Duration) (bool, error)\n\n\t// Get retrieves and returns the associated value of given <key>.\n\t// It returns nil if it does not exist or its value is nil.\n\tGet(key interface{}) (interface{}, error)\n\n\t// GetOrSet retrieves and returns the value of <key>, or sets <key>-<value> pair and\n\t// returns <value> if <key> does not exist in the cache. The key-value pair expires\n\t// after <duration>.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It deletes the <key> if <duration> < 0 or given <value> is nil, but it does nothing\n\t// if <value> is a function and the function result is nil.\n\tGetOrSet(key interface{}, value interface{}, duration time.Duration) (interface{}, error)\n\n\t// GetOrSetFunc retrieves and returns the value of <key>, or sets <key> with result of\n\t// function <f> and returns its result if <key> does not exist in the cache. The key-value\n\t// pair expires after <duration>.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It deletes the <key> if <duration> < 0 or given <value> is nil, but it does nothing\n\t// if <value> is a function and the function result is nil.\n\tGetOrSetFunc(key interface{}, f func() (interface{}, error), duration time.Duration) (interface{}, error)\n\n\t// GetOrSetFuncLock retrieves and returns the value of <key>, or sets <key> with result of\n\t// function <f> and returns its result if <key> does not exist in the cache. The key-value\n\t// pair expires after <duration>.\n\t//\n\t// It does not expire if <duration> == 0.\n\t// It does nothing if function <f> returns nil.\n\t//\n\t// Note that the function <f> should be executed within writing mutex lock for concurrent\n\t// safety purpose.\n\tGetOrSetFuncLock(key interface{}, f func() (interface{}, error), duration time.Duration) (interface{}, error)\n\n\t// Contains returns true if <key> exists in the cache, or else returns false.\n\tContains(key interface{}) (bool, error)\n\n\t// GetExpire retrieves and returns the expiration of <key> in the cache.\n\t//\n\t// It returns 0 if the <key> does not expire.\n\t// It returns -1 if the <key> does not exist in the cache.\n\tGetExpire(key interface{}) (time.Duration, error)\n\n\t// Remove deletes one or more keys from cache, and returns its value.\n\t// If multiple keys are given, it returns the value of the last deleted item.\n\tRemove(keys ...interface{}) (value interface{}, err error)\n\n\t// Update updates the value of <key> without changing its expiration and returns the old value.\n\t// The returned value <exist> is false if the <key> does not exist in the cache.\n\t//\n\t// It deletes the <key> if given <value> is nil.\n\t// It does nothing if <key> does not exist in the cache.\n\tUpdate(key interface{}, value interface{}) (oldValue interface{}, exist bool, err error)\n\n\t// UpdateExpire updates the expiration of <key> and returns the old expiration duration value.\n\t//\n\t// It returns -1 and does nothing if the <key> does not exist in the cache.\n\t// It deletes the <key> if <duration> < 0.\n\tUpdateExpire(key interface{}, duration time.Duration) (oldDuration time.Duration, err error)\n\n\t// Size returns the number of items in the cache.\n\tSize() (size int, err error)\n\n\t// Data returns a copy of all key-value pairs in the cache as map type.\n\t// Note that this function may leads lots of memory usage, you can implement this function\n\t// if necessary.\n\tData() (map[interface{}]interface{}, error)\n\n\t// Keys returns all keys in the cache as slice.\n\tKeys() ([]interface{}, error)\n\n\t// Values returns all values in the cache as slice.\n\tValues() ([]interface{}, error)\n\n\t// Clear clears all data of the cache.\n\t// Note that this function is sensitive and should be carefully used.\n\tClear() error\n\n\t// Close closes the cache if necessary.\n\tClose() error\n}\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u9002\u914d\u5668\u7684\u6ce8\u518c\u65b9\u6cd5\uff1a"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"// SetAdapter changes the adapter for this cache.\n// Be very note that, this setting function is not concurrent-safe, which means you should not call\n// this setting function concurrently in multiple goroutines.\nfunc (c *Cache) SetAdapter(adapter Adapter)\n\n"})}),"\n",(0,r.jsxs)(t.p,{children:["\u5177\u4f53\u793a\u4f8b\u8bf7\u53c2\u8003 ",(0,r.jsx)(t.a,{href:"output/goframe-v1.14-md/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86-Redis%E7%BC%93%E5%AD%98",children:"\u7f13\u5b58\u7ba1\u7406-Redis\u7f13\u5b58"})," \u7ae0\u8282\u3002"]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(296540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);